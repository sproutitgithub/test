pipeline {
    agent any

    stages {
        stage('Build VDA Test') {
            steps {
                echo 'Building Test Environment'
                echo "Path is ${env.WORKSPACE}\\${env.JOB_NAME}"
                echo "${env.WORKSPACE}"
                echo "${env.JOB_NAME}"
            }
        }
        /*
        stage('Pull Git') {
            steps {
                PullGit()
            }
        }
        */
        stage('Create Env') {
            steps {
                CreateEnv() 
           // sh 'false'    
            }
        }
        stage('Prepare Env') {
            steps {
                PrepareEnv() 
           // sh 'false'    
            }
        }
        stage('Build Env') {
            steps {
                BuildEnv() 
           // sh 'false'    
            }
        }
        stage('Config1 Env') {
            steps {
                Config1Env() 
           // sh 'false'    
            }
        }
        stage('Config2 Env') {
            steps {
                Config2Env() 
           // sh 'false'    
            }
        } 
        /*
        stage('Remove Env') {
            steps {
                RemoveEnv() 
           // sh 'false'    
            }
        }
      */
    }
}

    post {
        success {

            echo "About to Launch ${env.WORKSPACE}\\Script-VMM-BuildVDA-LogGoodBuildOutcome-Environment.ps1"
            Powershell "${env.WORKSPACE}\\Script-VMM-BuildVDA-LogGoodBuildOutcome-Environment.ps1"
            echo "About to Launch ${env.WORKSPACE}\\Script-VMM-BuildVDA-LogGoodTestToLive-environment.ps1"
            Powershell  "${env.WORKSPACE}\\Script-VMM-BuildVDA-LogGoodTestToLive-environment.ps1"

	        //archiveArtifacts "VDA_Test_Build\\TestResultsGood.txt"
            //archiveArtifacts "VDA_Test_Build\\FinalResults.txt"

	    }
        failure {
            
            echo "About to Launch ${env.WORKSPACE}\\Script-VMM-BuildVDA-LogFailedBuildOutcome-Environment.ps1"
            Powershell "${env.WORKSPACE}\\Script-VMM-BuildVDA-LogFailedBuildOutcome-Environment.ps1"
            echo "About to Launch ${env.WORKSPACE}\\Script-VMM-BuildVDA-LogFailedTestToLive-environment.ps1"
            Powershell  "${env.WORKSPACE}\\Script-VMM-BuildVDA-LogFailedTestToLive-environment.ps1"
            
            archiveArtifacts "Dev\\AllResults\\index.html"
            archiveArtifacts "Dev\\AllResults\\dashboard.html"
	    }
        always {
            echo 'The build has completed'
        }
       }
    

// steps
// steps

/*
def PullGit() {
    def err = null
      try {
        git branch: 'main', credentialsId: 'f495bb99-db9e-4896-8601-3a171f50d275', url: 'https://github.com/sproutitgithub/test.git'
      } catch(Exception ex) {
         println(ex.message);
         if (ex){
            throw ex
            println ("Failed in Test")
         }
      #
      }
		
}
*/
def CreateEnv() {
    def err = null
    def pspath0 = "${env.WORKSPACE}\\${env.JOB_NAME}\\Script-VMM-BuildVDA-Create-Environment.ps1"
      try {
         echo "About to Launch ${env.WORKSPACE}\\${env.JOB_NAME}\\Script-VMM-BuildVDA-Create-Environment.ps1"
         sleep 2
        powershell pspath0
      } catch(Exception ex) {
         println(ex.message);
         if (ex){
            throw ex
            println ("Failed in Create")
         }
      
      }
		
}

def PrepareEnv() {
    def err = null
    def pspath1 = "${env.WORKSPACE}\\${env.JOB_NAME}\\Script-VMM-BuildVDA-Prepare-environment.ps1"
      try {
         echo "About to Launch ${env.WORKSPACE}\\${env.JOB_NAME}\\Script-VMM-BuildVDA-Prepare-environment.ps1"
         sleep 2
        powershell pspath1
      } catch(Exception ex) {
         println(ex.message);
         if (ex){
            throw ex
            println ("Failed in Test")
         }
      
      }
		
}

def BuildEnv() {
    def err = null
        def pspath2 = "${env.WORKSPACE}\\${env.JOB_NAME}\\Script-VMM-BuildVDA-Build-Environment.ps1"
      try {
         echo "About to Launch ${env.WORKSPACE}\\${env.JOB_NAME}\\Script-VMM-BuildVDA-Build-Environment.ps1"
         sleep 2
     powershell pspath2
      } catch(Exception ex) {
         println(ex.message);
         if (ex){
            throw ex
            println ("Failed in Build")
         }
      
      }
}
		
def Config1Env() {
    def err = null
        def pspath3 = "${env.WORKSPACE}\\${env.JOB_NAME}\\Script-VMM-BuildVDA-Configure-environment-Step1.ps1"
      try {
         echo "About to Launch ${env.WORKSPACE}\\${env.JOB_NAME}\\Script-VMM-BuildVDA-Configure-environment-Step1.ps1"
         sleep 2
     powershell pspath3
      } catch(Exception ex) {
         println(ex.message);
         if (ex){
            throw ex
            println ("Failed in config1")
         }
      
      }
}

def Config2Env() {
    def err = null
        def pspath4 = "${env.WORKSPACE}\\${env.JOB_NAME}\\Script-VMM-BuildVDA-Configure-environment-Step2.ps1"
      try {
         echo "About to Launch ${env.WORKSPACE}\\${env.JOB_NAME}\\Script-VMM-BuildVDA-Configure-environment-Step2.ps1"
         sleep 2
     powershell pspath4
      } catch(Exception ex) {
         println(ex.message);
         if (ex){
            throw ex
            println ("Failed in config2")
         }
      
      }
}
/*
def RemoveEnv() {
    def err = null
        def pspath5 = "${env.WORKSPACE}\\Script-VMM-BuildVDA-Remove-environment.ps1"
      try {
         echo "About to Launch ${env.WORKSPACE}\\Script-VMM-BuildVDA-Remove-environment.ps1"
         sleep 2
     powershell pspath5
      } catch(Exception ex) {
         println(ex.message);
         if (ex){
            throw ex
            println ("Failed in Remove")
         }
      
      }
}
*/